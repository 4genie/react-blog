{"version":3,"sources":["utils.js","WebAPI.js","contexts.js","pages/LoginPage/LoginPage.js","pages/RegisterPage/RegisterPage.js","pages/HomePage/HomePage.js","pages/PostPage/PostPage.js","pages/AboutPage/AboutPage.js","pages/NewPostPage/NewPostPage.js","components/Header/Header.js","components/Footer/Footer.js","components/App/App.js","index.js"],"names":["TOKEN_NAME","setAuthToken","token","localStorage","setItem","getAuthToken","getItem","BASE_URL","getLimitPosts","page","limit","fetch","then","res","json","getMe","headers","authorization","AuthContext","createContext","ErrorMessage","styled","div","Title","Form","form","LoginPage","setUser","useContext","useState","username","setUsername","password","setPassword","errorMessage","setErrorMessage","isSubmit","useRef","history","useHistory","onSubmit","e","preventDefault","current","method","body","JSON","stringify","login","data","ok","message","response","toString","push","className","value","onChange","target","required","type","RegisterPage","nickname","setNickname","register","Root","PostContainer","PostTitle","Link","PostDate","PaginationContainer","PageButton","li","Loading","Post","post","to","id","title","Date","createdAt","toLocaleDateString","HomePage","posts","setPosts","pages","setPages","isLoading","setIsLoading","useEffect","totalPages","Math","ceil","length","i","getPages","catch","err","map","onClick","handlePageClick","PostHeader","PostBody","PostButton","button","PostPage","setPost","useParams","getPost","deletePost","AboutTitle","AboutContent","AboutPage","PageTitle","setTitle","content","setContent","addNewPost","placeholder","rows","HeaderContainer","Brand","NavbarList","Nav","props","$active","LeftContainer","Header","location","useLocation","user","isLoadingGetMe","pathname","FooterContainer","Footer","App","setIsLoadingGetMe","Provider","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e5dcbfcf.chunk.js","sourcesContent":["const TOKEN_NAME = 'token';\r\n\r\n// save token to localStorage\r\nexport const setAuthToken = (token) => {\r\n  localStorage.setItem(TOKEN_NAME, token);\r\n};\r\n\r\n// extract token from localStorage\r\nexport const getAuthToken = () => {\r\n  return localStorage.getItem(TOKEN_NAME);\r\n};\r\n\r\nexport const getPages = (totalPages) => {\r\n  let pages = [];\r\n  for (let i = 1; i <= totalPages; i++) {\r\n    pages.push(i);\r\n  }\r\n  return pages;\r\n};\r\n","import { getAuthToken } from './utils';\r\n\r\n// api URL\r\nconst BASE_URL = 'https://student-json-api.lidemy.me';\r\n\r\n// 拿到所有的文章\r\nexport const getPosts = () => {\r\n  return fetch(`${BASE_URL}/posts?_sort=createdAt&_order=desc`).then((res) =>\r\n    res.json()\r\n  );\r\n};\r\n\r\n// get posts count\r\n// export const getPostsCount = () => {\r\n//   return fetch(`${BASE_URL}/posts?_limit=5&_sort=createdAt&_order=desc`).then(\r\n//     (res) => {\r\n//       return res.headers.get('X-Total-Count');\r\n//     }\r\n//   );\r\n// };\r\n\r\n// 根據參數 id, 拿到特定的一篇文章\r\nexport const getPost = (id) => {\r\n  return fetch(`${BASE_URL}/posts?id=${id}`).then((res) => res.json());\r\n};\r\n\r\n// 根據參數 page、limit 拿到限定第幾頁且每頁多少篇的文章\r\nexport const getLimitPosts = (page, limit) =>\r\n  fetch(\r\n    `${BASE_URL}/posts?_page=${page}&_limit=${limit}&_sort=createdAt&_order=desc`\r\n  ).then((res) => res.json());\r\n\r\n// 新增文章\r\nexport const addNewPost = (title, body) => {\r\n  // 拿到 localStorage 中的身份驗證 token\r\n  const token = getAuthToken();\r\n  // 用 POST 方法，將 token、文章標題 title、文章內容 body 上傳到 API\r\n  return fetch(`${BASE_URL}/posts`, {\r\n    method: 'POST',\r\n\r\n    headers: {\r\n      'content-type': 'application/json',\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n\r\n    body: JSON.stringify({\r\n      title,\r\n      body,\r\n    }),\r\n  }).then((res) => res.json());\r\n};\r\n\r\n// 刪除文章\r\nexport const deletePost = (id) => {\r\n  // 拿到 localStorage 中的身份驗證 token\r\n  const token = getAuthToken();\r\n  // 用 DELETE 方法，將 token、文章 id 上傳到 API\r\n  return fetch(`${BASE_URL}/posts/${id}`, {\r\n    method: 'DELETE',\r\n    headers: {\r\n      authorization: `Bearer ${token}`,\r\n      'content-type': 'application/json',\r\n    },\r\n  }).then((res) => res.json());\r\n};\r\n\r\n// 註冊\r\nexport const register = (username, nickname, password) => {\r\n  // 用 POST 方法，將 username、nickname、password 上傳到 API\r\n  return fetch(`${BASE_URL}/register`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'content-type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      username,\r\n      nickname,\r\n      password,\r\n    }),\r\n  }).then((res) => res.json());\r\n};\r\n\r\n// 登入\r\nexport const login = (username, password) => {\r\n  // 用 POST 方法，將 username、password 上傳到 API\r\n  return fetch(`${BASE_URL}/login`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'content-type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      username,\r\n      password,\r\n    }),\r\n  }).then((res) => res.json());\r\n};\r\n\r\n// 身份驗證\r\nexport const getMe = () => {\r\n  // 拿到 localStorage 中的身份驗證 token 內容\r\n  const token = getAuthToken();\r\n  // 在 headers 裡帶入 token，進行驗證\r\n  return fetch(`${BASE_URL}/me`, {\r\n    headers: {\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  }).then((res) => res.json());\r\n};\r\n","import { createContext } from 'react';\r\n\r\nexport const AuthContext = createContext(null);\r\n","import React, { useState, useContext, useRef } from 'react';\nimport styled from 'styled-components';\nimport { useHistory } from 'react-router-dom';\n\nimport { login, getMe } from '../../WebAPI';\nimport { setAuthToken } from '../../utils';\nimport { AuthContext } from '../../contexts';\n\nconst ErrorMessage = styled.div`\n  color: red;\n`;\nconst Title = styled.div`\n  margin-top: 20px;\n  text-align: center;\n  font-size: 36px;\n  text-weight: 600;\n`;\nconst Form = styled.form`\n  width: 30%;\n  min-width: 300px;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  margin: 40px auto;\n  padding: 40px;\n  justify-content: space-between;\n  min-height: 110px;\n  border: 1.2px solid rgba(200, 200, 200, 0.5);\n  box-shadow: 1px 1px 3px #fbfbfb;\n  border-radius: 5px;\n  font-family: '微軟正黑體';\n`;\n\nexport default function LoginPage() {\n  // 用 useContext 拿到 App.js 傳入的 setUser 這個 props\n  const { setUser } = useContext(AuthContext);\n  // 設定 username 的 state\n  const [username, setUsername] = useState('');\n  // 設定 password 的 state\n  const [password, setPassword] = useState('');\n  // 設定 errorMessage 的 state\n  const [errorMessage, setErrorMessage] = useState('');\n  // 是否正在點擊'Log In'按鈕，預設為 false\n  const isSubmit = useRef(false);\n  const history = useHistory();\n\n  // 執行登入功能\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // 將錯誤訊息清除\n    setErrorMessage(null);\n    // 如果正在點擊 'Log In' 按鈕，不進行任何動作\n    if (isSubmit.current) return;\n\n    // 否則，將正在點擊 'Log In' 按鈕狀態設為 true\n    isSubmit.current = true;\n    // 串接登入的 API，並帶入參數 username、password\n    login(username, password).then((data) => {\n      // 如果有誤 => 回傳錯誤訊息\n      if (data.ok === 0) {\n        return setErrorMessage(data.message);\n      }\n      // 否則將回傳的 token 存到 localStorage\n      setAuthToken(data.token);\n      // 將 token 帶回 API，以進行身份驗證\n      getMe().then((response) => {\n        // 如果身份驗證有誤\n        if (response.ok !== 1) {\n          // token 清空\n          setAuthToken(null);\n          // 回傳錯誤訊息\n          return setErrorMessage(response.toString());\n        }\n        // 身份驗證通過：更新 user 的 state\n        setUser(response.data);\n        // 回到首頁\n        history.push('/');\n        //執行完上述後，將正在點擊'Log In'按鈕的狀態，設回 false\n        isSubmit.current = false;\n      });\n    });\n  };\n\n  return (\n    <>\n      <Title>Log In</Title>\n      {/* 點擊 Log In 按鈕提交後，表單執行 handleSubmit() */}\n      <Form onSubmit={handleSubmit}>\n        <div>\n          username :{' '}\n          <input\n            className=\"form-input\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n            required\n          />\n        </div>\n        <div>\n          password :{' '}\n          <input\n            className=\"form-input\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            required\n          />\n        </div>\n        <button type=\"submit\" className=\"form-btn\">\n          Log In\n        </button>\n\n        {/* 有錯誤訊息時，顯示在此 */}\n        {errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage>}\n      </Form>\n    </>\n  );\n}\n","import React, { useState, useContext, useRef } from 'react';\nimport styled from 'styled-components';\nimport { useHistory } from 'react-router-dom';\n\nimport { register, getMe } from '../../WebAPI';\nimport { setAuthToken } from '../../utils';\nimport { AuthContext } from '../../contexts';\n\nconst ErrorMessage = styled.div`\n  color: red;\n`;\n\nconst Title = styled.div`\n  margin-top: 20px;\n  text-align: center;\n  font-size: 36px;\n  text-weight: 600;\n`;\n\nconst Form = styled.form`\n  width: 30%;\n  min-width: 300px;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  margin: 40px auto;\n  padding: 40px;\n  justify-content: space-between;\n  min-height: 110px;\n  border: 1.2px solid rgba(200, 200, 200, 0.5);\n  box-shadow: 1px 1px 3px #fbfbfb;\n  border-radius: 5px;\n  font-family: '微軟正黑體';\n`;\n\nexport default function RegisterPage() {\n  // 用 useContext 拿到 App.js 傳入的 setUser 這個 props\n  const { setUser } = useContext(AuthContext);\n  // 設定 username 的 state\n  const [username, setUsername] = useState('');\n  // 設定 password 的 state\n  const [password, setPassword] = useState('');\n  // 設定 nickname 的 state\n  const [nickname, setNickname] = useState('');\n  // 設定 errorMessage 的 state\n  const [errorMessage, setErrorMessage] = useState('');\n  // 是否正在點擊'Sign Up'按鈕，預設為 false\n  const isSubmit = useRef(false);\n  const history = useHistory();\n\n  // 執行註冊功能\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // 將錯誤訊息清除\n    setErrorMessage(null);\n    // 如果正在點擊 'Sign Up' 按鈕，不進行任何動作\n    if (isSubmit.current) return;\n    // 否則，將正在點擊 'Sign Up' 按鈕狀態設為 true\n    isSubmit.current = true;\n    // 串接註冊的 API，並帶入參數 username、nickname、password\n    register(username, nickname, password).then((data) => {\n      if (data.ok === 0) {\n        // 如果有錯，顯示錯誤訊息\n        return setErrorMessage(data.message);\n      }\n      // 否則將回傳的 token 存到 localStorage\n      setAuthToken(data.token);\n      // 將 token 帶回 API，以進行身份驗證\n      getMe().then((response) => {\n        // 如果身份驗證有誤\n        if (response.ok !== 1) {\n          // token 清空\n          setAuthToken(null);\n          // 回傳錯誤訊息\n          return setErrorMessage(response.toString());\n        }\n        // 身份驗證通過：更新 user 的 state\n        setUser(response.data);\n        // 回到首頁\n        history.push('/');\n        //執行完上述後，將正在點擊'Sign Up'按鈕的狀態，設回 false\n        isSubmit.current = false;\n      });\n    });\n  };\n\n  return (\n    <>\n      <Title>Sign Up</Title>\n      {/* 點擊 Sign Up 按鈕提交後，表單執行 handleSubmit() */}\n      <Form onSubmit={handleSubmit}>\n        <div>\n          username:{' '}\n          <input\n            className=\"form-input\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n            required\n          />\n        </div>\n        <div>\n          nickname:{' '}\n          <input\n            className=\"form-input\"\n            value={nickname}\n            onChange={(e) => setNickname(e.target.value)}\n            required\n          />\n        </div>\n        <div>\n          password:{' '}\n          <input\n            className=\"form-input\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            required\n          />\n        </div>\n        <button type=\"submit\" className=\"form-btn\">\n          Sign Up\n        </button>\n\n        {/* 有錯誤訊息時，顯示在此 */}\n        {errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage>}\n      </Form>\n    </>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { getLimitPosts, getPosts } from '../../WebAPI';\nimport { getPages } from '../../utils';\n\nconst Root = styled.div`\n  width: 75%;\n  margin: 0 auto;\n`;\nconst PostContainer = styled.div`\n  border-bottom: solid 1px rgba(0, 12, 34, 0.2);\n  padding: 16px;\n  display: flex;\n  align-items: flex-end;\n  justify-content: space-between;\n\n  &:hover {\n    background-color: rgba(0, 12, 34, 0.07);\n  }\n`;\nconst PostTitle = styled(Link)`\n  font-size: 24px;\n  color: #333;\n  text-decoration: none;\n`;\n\nconst PostDate = styled.div`\n  color: rgba(0, 0, 0, 0.8);\n`;\n\nconst PaginationContainer = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n`;\n\nconst PageButton = styled.li`\n  width: 45px;\n  height: 45px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 18px;\n  cursor: pointer;\n  outline: transparent;\n  border: solid 1px rgba(0, 12, 34, 0.1);\n  margin-top: 20px;\n\n  &:hover {\n    background-color: rgba(0, 12, 34, 0.07);\n  }\n`;\n\nconst Loading = styled.div`\n  margin-top: 30px;\n  display: flex;\n  justify-content: center;\n  align-item: center;\n  font-size: 28px;\n`;\n\n// 接收從 HomePage props.post\nfunction Post({ post }) {\n  return (\n    <PostContainer>\n      <PostTitle to={`/posts/${post.id}`}>{post.title}</PostTitle>\n      <PostDate>{new Date(post.createdAt).toLocaleDateString()}</PostDate>\n    </PostContainer>\n  );\n}\n\nPost.propTypes = {\n  post: PropTypes.object,\n};\n\nexport default function HomePage() {\n  // 設定 posts 的 state\n  const [posts, setPosts] = useState([]);\n  // 設定 pages 的 state\n  const [pages, setPages] = useState([]);\n  // 設定 isLoading 的 state\n  const [isLoading, setIsLoading] = useState(false);\n  // 設定每頁顯示多少筆\n  const limit = 5;\n\n  useEffect(() => {\n    // 設 isLoading 為 true\n    setIsLoading(true);\n    getPosts()\n      .then((posts) => {\n        // 計算每頁 limit 筆的話，全部共有多少頁\n        let totalPages = Math.ceil(posts.length / limit);\n        // 計算出全部頁數後，更新 pages 的state\n        setPages(getPages(totalPages));\n        // 到第一頁\n        getLimitPosts(1, limit).then((posts) => setPosts(posts));\n        // 成功後，將 isLoading 的 state 更新為 false\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        // API 串接有誤時，isLoading 的 state 更新為 false\n        setIsLoading(false);\n      });\n  }, []);\n\n  // 執行 handlePageClick()\n  const handlePageClick = (page) => {\n    getLimitPosts(page, limit).then((posts) => setPosts(posts));\n  };\n\n  return (\n    <Root>\n      {/* 若在載入中，尚未從 API 中取得任何資料，顯示 '正在載入中' */}\n      {isLoading && <Loading>正在載入中...</Loading>}\n\n      {/* 若已從 API 拿到資料，將每一筆資料透過 props.post 帶到 Post 這個 component， */}\n      {posts.map((post) => (\n        <Post key={post.id} post={post} />\n      ))}\n\n      {/* 顯示頁數 */}\n      <PaginationContainer>\n        {posts.length > 0 &&\n          pages.map((page) => (\n            // 點擊頁碼按鈕時，執行 handlePageClick()\n            <PageButton key={page} onClick={() => handlePageClick(page)}>\n              {page}\n            </PageButton>\n          ))}\n      </PaginationContainer>\n    </Root>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { getPost, deletePost } from '../../WebAPI';\n\nconst Root = styled.div`\n  width: 75%;\n  margin: 0 auto;\n`;\n\nconst PostContainer = styled.div`\n  padding: 16px;\n  margin: 8px auto;\n  max-width: 960px;\n`;\n\nconst PostHeader = styled.div`\n  padding: 16px 0;\n`;\n\nconst PostTitle = styled.div`\n  font-size: 28px;\n  font-weight: 700;\n  color: #333;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\nconst PostDate = styled.div`\n  color: rgba(0, 0, 0, 0.8);\n  margin-top: 10px;\n`;\n\nconst PostBody = styled.div`\n  text-align: justify;\n  font-size: 20px;\n  letter-spacing: 3px;\n  line-height: 1.5;\n  white-space: pre-wrap;\n`;\n\nconst PostButton = styled.button`\n  border: none;\n  height: 35px;\n  width: 100px;\n  border-radius: 5px;\n  cursor: pointer;\n  margin-left: 20px;\n\n  &:hover {\n    background-color: rgba(0, 12, 34, 0.1);\n  }\n`;\n\nconst Loading = styled.div`\n  margin-top: 30px;\n  display: flex;\n  justify-content: center;\n  align-item: center;\n  font-size: 28px;\n`;\n\nexport default function PostPage() {\n  // 設定 post 的 state\n  const [post, setPost] = useState(null);\n  // 設定 isLoading 的 state\n  const [isLoading, setIsLoading] = useState(false);\n  const history = useHistory();\n  // 取得 URL 上 id 的參數\n  const { id } = useParams();\n\n  useEffect(() => {\n    // 設 isLoading 為 true\n    setIsLoading(true);\n    // 執行 getPost()，並將 id 帶入，取得特定 id 的文章\n    getPost(id)\n      .then((post) => {\n        // 成功後，將 isLoading 的 state 更新為 false\n        setIsLoading(false);\n        // post 的 state 更新為取得的 post 內容\n        setPost(post[0]);\n      })\n      .catch((err) => {\n        // API 串接有誤時，isLoading 的 state 更新為 false\n        setIsLoading(false);\n      });\n    // dependency： 當偵測到 id 值才重新渲染\n  }, [id]);\n\n  // 執行 handleDelete()\n  const handleDelete = () => {\n    // 串接API, 執行 deletePost()，並帶入 id 值， 刪除 id 為此的文章\n    deletePost(id).then(() => {\n      // 刪除成功後轉到首頁\n      history.push('/');\n    });\n  };\n\n  return (\n    <Root>\n      {/* 若在載入中，尚未從 API 中取得任何資料，顯示 '正在載入中' */}\n      {isLoading && <Loading>正在載入中...</Loading>}\n\n      {/* 若已從 API 拿到資料，顯示文章內容 */}\n      <PostContainer>\n        <PostHeader>\n          <PostTitle>\n            {post && post.title}\n            {!isLoading && (\n              // 點擊 '刪除此文' 按鈕時，執行 handleDelete\n              <PostButton onClick={handleDelete}>刪除此文</PostButton>\n            )}\n          </PostTitle>\n          <PostDate>\n            {post && new Date(post.createdAt).toLocaleDateString()}\n          </PostDate>\n        </PostHeader>\n        <PostBody>{post && post.body}</PostBody>\n      </PostContainer>\n    </Root>\n  );\n}\n","import styled from 'styled-components';\r\n\r\nconst Root = styled.div`\r\n  width: 80%;\r\n  margin: 0 auto;\r\n  text-align: center;\r\n`;\r\nconst AboutTitle = styled.div`\r\n  margin: 40px 0;\r\n  font-size: 36px;\r\n`;\r\nconst AboutContent = styled.div`\r\n  font-size: 24px;\r\n  padding: 30px;\r\n`;\r\n\r\nexport default function AboutPage() {\r\n  return (\r\n    <Root>\r\n      <AboutTitle>This Blog</AboutTitle>\r\n      <AboutContent>\r\n        Build up with React , and only for practicing use\r\n      </AboutContent>\r\n    </Root>\r\n  );\r\n}\r\n","import React, { useState, useRef } from 'react';\nimport styled from 'styled-components';\nimport { useHistory } from 'react-router-dom';\nimport { addNewPost } from '../../WebAPI';\n\nconst ErrorMessage = styled.div`\n  color: red;\n`;\n\nconst PageTitle = styled.div`\n  margin-top: 20px;\n  text-align: center;\n  font-size: 36px;\n  text-weight: 600;\n`;\n\nconst Form = styled.form`\n  width: 50%;\n  min-width: 40px;\n  display: flex;\n  flex-direction: column;\n  margin: 40px auto;\n  padding: 40px;\n  min-height: 360px;\n  border: 1.2px solid rgba(200, 200, 200, 0.5);\n  box-shadow: 1px 1px 3px #fbfbfb;\n  border-radius: 5px;\n  font-family: '微軟正黑體';\n`;\n\nexport default function RegisterPage() {\n  // 設定 title 的 state\n  const [title, setTitle] = useState('');\n  // 設定 content 的 state\n  const [content, setContent] = useState('');\n  // 設定 errorMessage 的 state\n  const [errorMessage, setErrorMessage] = useState('');\n  const history = useHistory();\n  // 是否正在點擊'Publish'按鈕，預設為 false\n  const isSubmit = useRef(false);\n\n  // 執行提交功能\n  const handleSubmit = (e) => {\n    // e.preventDefault();\n    // 將錯誤訊息清除\n    setErrorMessage(null);\n    // 如果正在點擊 'Publish' 按鈕，不進行任何動作\n    if (isSubmit.current) return;\n    // 否則，將正在點擊 'Publish' 按鈕狀態設為 true\n    isSubmit.current = true;\n    // 串接新增文章的 API，並帶入參數 title、content\n    addNewPost(title, content).then((data) => {\n      if (data.ok === 0) {\n        // 如果有錯，顯示錯誤訊息\n        return setErrorMessage(data.message);\n      }\n      // 回到首頁\n      history.push('/');\n      //執行完上述後，將正在點擊'Publish'按鈕的狀態，設回 false\n      isSubmit.current = false;\n    });\n  };\n\n  return (\n    <>\n      <PageTitle>New Post</PageTitle>\n      {/* 點擊 Publish 按鈕提交後，表單執行 handleSubmit() */}\n      <Form onSubmit={handleSubmit}>\n        <div>\n          <input\n            className=\"form-title\"\n            placeholder=\"Title\"\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            required\n          />\n        </div>\n        <div>\n          <textarea\n            className=\"form-textarea\"\n            placeholder=\"Say something...\"\n            rows=\"15\"\n            value={content}\n            onChange={(e) => setContent(e.target.value)}\n            required\n          />\n        </div>\n        <button type=\"submit\" className=\"form-btn\">\n          Publish\n        </button>\n\n        {/* 有錯誤訊息時，顯示在此 */}\n        {errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage>}\n      </Form>\n    </>\n  );\n}\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { Link, useLocation, useHistory } from 'react-router-dom';\nimport { AuthContext } from '../../contexts';\nimport { setAuthToken } from '../../utils';\n\nconst HeaderContainer = styled.div`\n  height: 64px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  border-bottom: solid 1px rgba(0, 0, 0, 0.3);\n  padding: 0px 32px;\n  background: white;\n`;\n\nconst Brand = styled.div`\n  font-size: 32px;\n  font-weight: bold;\n`;\n\nconst NavbarList = styled.div`\n  display: flex;\n  align-items: center;\n  height: 64px;\n`;\n\nconst Nav = styled(Link)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  box-sizing: border-box;\n  width: 100px;\n  cursor: pointer;\n  color: black;\n  text-decoration: none;\n\n  ${(props) => props.$active && `background-color: rgba(0,0,0,0.1)`};\n`;\n\nconst LeftContainer = styled.div`\n  display: flex;\n  align-items: center;\n\n  ${NavbarList} {\n    margin-left: 64px;\n  }\n`;\n\nexport default function Header() {\n  const location = useLocation();\n  const history = useHistory();\n  // 用 useContext 拿到 App.js 傳入的 props\n  const { user, setUser, isLoadingGetMe } = useContext(AuthContext);\n\n  // 登出\n  const handleLogout = () => {\n    // 將 token 設為空\n    setAuthToken('');\n    // 將 user 的 state 設為 null\n    setUser(null);\n    // 如果登出時當前頁不是首頁 => 回到首頁\n    if (location.pathname !== '/') {\n      history.push('/');\n    }\n  };\n\n  return (\n    <HeaderContainer>\n      {!isLoadingGetMe && (\n        <>\n          <LeftContainer>\n            <Brand>Blog</Brand>\n            <NavbarList>\n              <Nav to=\"/\" $active={location.pathname === '/'}>\n                Posts\n              </Nav>\n\n              {/* 使用者登入時顯示 Publish 欄位，讓登入後的使用者可以新增文章 */}\n              {user && (\n                <Nav to=\"/new-post\" $active={location.pathname === '/new-post'}>\n                  Publish\n                </Nav>\n              )}\n\n              <Nav to=\"/about\" $active={location.pathname === '/about'}>\n                About\n              </Nav>\n            </NavbarList>\n          </LeftContainer>\n\n          <NavbarList>\n            {/* 使用者未登入時顯示 Sign Up 欄位，讓使用者可以註冊  */}\n            {!user && (\n              <Nav to=\"/register\" $active={location.pathname === '/register'}>\n                Sign Up\n              </Nav>\n            )}\n\n            {/* 使用者未登入時顯示 Log In 欄位，讓使用者可以登入  */}\n            {!user && (\n              <Nav to=\"/login\" $active={location.pathname === '/login'}>\n                Log In\n              </Nav>\n            )}\n\n            {/* 使用者登入時顯示 Log Out 欄位，讓使用者可以登出  */}\n            {user && (\n              // 點擊 Log Out 後,執行 handleLogout\n              <Nav to=\"/login\" onClick={handleLogout}>\n                Log Out\n              </Nav>\n            )}\n          </NavbarList>\n        </>\n      )}\n    </HeaderContainer>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst FooterContainer = styled.div`\n  margin: 30px 0;\n  font-family: '微軟正黑體';\n  font-weight: 500;\n  text-align: center;\n  letter-spacing: 1.2px;\n`;\n\nexport default function Footer() {\n  return (\n    <FooterContainer>\n      <div>- React Blog Homework from Lidemy {' ♥ '} -</div>\n    </FooterContainer>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport '../../index.css';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport LoginPage from '../../pages/LoginPage';\nimport RegisterPage from '../../pages/RegisterPage';\nimport HomePage from '../../pages/HomePage';\nimport PostPage from '../../pages/PostPage';\nimport AboutPage from '../../pages/AboutPage';\nimport NewPostPage from '../../pages/NewPostPage';\nimport Header from '../Header/Header';\nimport Footer from '../Footer/Footer';\nimport { AuthContext } from '../../contexts';\nimport { getMe } from '../../WebAPI';\nimport { getAuthToken } from '../../utils';\n\nconst Root = styled.div`\n  padding-top: 64px;\n`;\n\nfunction App() {\n  // 設定 user 的 state\n  const [user, setUser] = useState(null);\n  // 設定 isLoadingGetMe 的 state\n  const [isLoadingGetMe, setIsLoadingGetMe] = useState(true);\n\n  useEffect(() => {\n    //有 token 才 call api\n    if (getAuthToken()) {\n      // 進行身份驗證\n      getMe().then((response) => {\n        // 如果驗證成功\n        if (response.ok) {\n          // 更新 User 的 state\n          setUser(response.data);\n          // 更新 isLoadingGetMe 的 state 為 false\n          setIsLoadingGetMe(false);\n        }\n      });\n    } else {\n      // 如果驗證失敗， 更新 isLoadingGetMe 的 state 為 false\n      setIsLoadingGetMe(false);\n    }\n  }, []);\n\n  return (\n    //react 中的 createContext，將很多子 component 都會共用到的 props 傳下去\n    <AuthContext.Provider value={{ user, setUser, isLoadingGetMe }}>\n      <Root>\n        <Router>\n          <Header />\n          <Switch>\n            <Route exact path=\"/\">\n              <HomePage />\n            </Route>\n            <Route exact path=\"/about\">\n              <AboutPage />\n            </Route>\n            <Route exact path=\"/posts/:id\">\n              <PostPage />\n            </Route>\n            <Route exact path=\"/new-post\">\n              <NewPostPage />\n            </Route>\n            <Route exact path=\"/register\">\n              <RegisterPage />\n            </Route>\n            <Route exact path=\"/login\">\n              <LoginPage />\n            </Route>\n          </Switch>\n        </Router>\n        <Footer />\n      </Root>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}